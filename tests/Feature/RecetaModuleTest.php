<?php

namespace Tests\Feature;

use App\Models\Receta;
use App\Models\User;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Http\UploadedFile;
use Illuminate\Support\Facades\Storage;
use Laravel\Sanctum\Sanctum;
use Tests\TestCase;

class RecetaModuleTest extends TestCase
{
    // para que se borre la base de datos antes de cada test
    use RefreshDatabase;

    private $usuario;
    private $receta;
    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->usuario = User::factory()->create();

        Storage::fake('avatars');

        $file = UploadedFile::fake()->image('avatar.jpg');

        $this->receta = Receta::factory([
            'id' => 1,
            'titulo' => 'Test titulo',
            'slug' => 'Test titulo',
            'seo_titulo' => 'Test seo_titulo',
            'seo_descripcion' => 'Test seo_descripcion',
            'imagen_url' => $file,
            'descripcion' => 'Test descripcion',
            'preparacion' => 'Test preparacion',
            'fecha_publicacion' => '2021-06-15',
            'publicacion' => 1,
            'caloria' => 2,
            'grasa' => 2,
            'proteina' => 2,
            'created_at' => now(),
            'updated_at' => now(),
        ])->create();
        
    
        Sanctum::actingAs(
            $this->usuario,
            ['*']
        );
    }
    /**
     * A basic feature test example.
     *
     * @return void
     */
    public function test_recetas()
    {
        $this->withoutExceptionHandling();
        $response = $this->get(route('recetas'));
        $response->assertStatus(200);
    }

    public function test_create_recetas()
    {
        $this->withoutExceptionHandling();
        $response = $this->get(route('recetas.create'));
        $response->assertStatus(200);
    }

    public function test_edit_recetas()
    {
        $this->withoutExceptionHandling();
        $response = $this->get(route('recetas.edit', 1));
        $response->assertStatus(200);
    }

    public function test_list_recetas()
    {

        $this->withoutExceptionHandling();

        $response = $this->get(route('recetas'));

        $response->assertStatus(200);

        $response->assertViewIs('livewire.admin.recetas.recetas');
    }


    public function test_post_recetas()
    {
        $this->WithoutMiddleware();
        //    $this->withoutExceptionHandling();

        Storage::fake('avatars');

        $file = UploadedFile::fake()->image('avatar.jpg');

        $response = $this->post(route('recetas.store'), [
            'titulo' => 'Test titulo',
            'slug' => 'Test titulo',
            'seo_titulo' => 'Test seo_titulo',
            'seo_descripcion' => 'Test seo_descripcion',
            'imagen_url' => $file,
            'descripcion' => 'Test descripcion',
            'preparacion' => 'Test preparacion',
            'fecha_publicacion' => now(),
            'publicacion' => 1,
            'caloria' => 2,
            'grasa' => 2,
            'proteina' => 2,
            'created_at' => now(),
            'updated_at' => now(),
        ]);

        $response->assertStatus(302);

        $this->assertCount(1, Receta::all());

        $recetas = Receta::all()->last();

        $this->assertEquals($recetas->titulo, 'Test titulo');
    }

    public function test_update_recetas()
    {

        dd($this->receta);

        $response = $this->put(route('recetas.update', $this->receta), [

            'titulo' => 'Test titlo 2',
        ]);

        $response->assertStatus(302);

        $this->assertCount(2, Receta::all());

        $recetas = Receta::find(1);

        $this->assertEquals($recetas->titulo, 'Test titulo 2');
    }

    public function test_delete_recetas()
    {

        $response = $this->delete(route('recetas.delete', $this->receta->id));

        $response->assertStatus(302);

        $this->assertCount(0, Receta::all());
    }
}
