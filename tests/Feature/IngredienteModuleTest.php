<?php

namespace Tests\Feature;

use App\Models\Alimento;
use App\Models\Ingrediente;
use App\Models\CategoriaAlimento;
use App\Models\Receta;
use App\Models\User;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Laravel\Sanctum\Sanctum;
use Tests\TestCase;

class IngredienteModuleTest extends TestCase
{
    use RefreshDatabase;

    private $usuario;
    private $ingredientes;
    private $recetas;
    private $alimentos;
    private $categoria_alimento;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->usuario = User::factory()->create();
        
        $this->categoria_alimento = CategoriaAlimento::factory()->create();

        
        $this->alimentos = Alimento::factory([
            'id'=>1,
            'nombre'=>'Prueba',
            'categoria_alimento_id' => $this->categoria_alimento->id,
            'created_at'=>now(),
            'updated_at'=>now(),
        ])->create();

        $this->recetas = Receta::factory()->create();

        $this->ingredientes = Ingrediente::factory([
            'id'=>1,
            'porcion' => '2 tazas',
            'alimento_id' => $this->alimentos->id,
            'receta_id' => $this->recetas->id,
            'created_at'=>now(),
            'updated_at'=>now(),
        ])->create();

        Sanctum::actingAs(
            $this->usuario,
            ['*']
        );
    }
    /**
     * A basic feature test example.
     *
     * @return void
     */
    public function test_ingredientes_status()
    {
        $response = $this->get(route('ingredientes.index',$this->recetas->id));

        $response->assertStatus(200);
    }

    public function test_edit_ingredientes()
    {
        $this->withoutExceptionHandling();
        $response = $this->get(route('ingredientes.edit', 1));
        $response->assertStatus(200);
    }

    public function test_list_ingredientes()
    {

        $this->withoutExceptionHandling();

        $response = $this->get(route('ingredientes.index',$this->recetas->id));

        $response->assertStatus(200);

        $response->assertViewIs('livewire.admin.ingredientes.ingredientes');
    }


    public function test_post_ingredientes()
    {
        $this->WithoutMiddleware();
        $this->withoutExceptionHandling();

        $response = $this->post(route('ingredientes.store'), [
            'id'=>1,
            'porcion' => '2 tazas',
            'alimento_id' => $this->alimentos->id,
            'receta_id' => $this->recetas->id,
            'created_at'=>now(),
            'updated_at'=>now(),
        ]);

        $response->assertStatus(302);

        $this->assertCount(2, Ingrediente::all());

        $ingrediente = Ingrediente::all()->last();

        $this->assertEquals($ingrediente->porcion, '2 tazas');
    }

    public function test_update_ingredientes()
    {

        $this->WithoutMiddleware();

        $response = $this->put(route('ingredientes.update', $this->ingredientes->id), [
            'porcion' => '3 tazas',
            'alimento_id' => $this->alimentos->id,
            'receta_id' => $this->recetas->id,
        ]);

        $response->assertStatus(302);

    
        $this->assertCount(2, Ingrediente::all());


        $ingrediente = Ingrediente::find(2);

        $this->assertEquals($ingrediente->porcion, '3 tazas');
    }

    public function test_delete_ingredientes()
    {

        $this->WithoutMiddleware();

        $response = $this->delete(route('ingredientes.delete',$this->ingredientes->id));

        $response->assertStatus(302);

        $this->assertCount(0, Ingrediente::all());
    }
}
