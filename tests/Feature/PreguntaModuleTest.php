<?php

namespace Tests\Feature;

use App\Models\Pregunta;
use App\Models\User;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Laravel\Sanctum\Sanctum;
use Tests\TestCase;

class PreguntaModuleTest extends TestCase
{

    use RefreshDatabase;

    private $usuario;
    private $preguntas;
    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->usuario = User::factory()->create();

        // Aca se crea una categorias, y podemos controlar los datos creados
        $this->preguntas = Pregunta::factory([
            'id'=>1,
            'pregunta' => 'titulo',
            'icono' =>'placeholder.png',
            'descripcion' => 'Lorem ipsum dolor sit amet, consectetur adipisicing elit. Amet iure, officiis adipisci, illo perspiciatis harum obcaecati, inventore minus velit natus debitis. Accusamus ea nesciunt dolorem incidunt accusantium recusandae atque alias!',
            'tipo_respuestas' => '1',
            'updated_at' => now(),
            'created_at' => now(),
        ])->create();

        Sanctum::actingAs(
            $this->usuario,
            ['*']
        );
    }
    /**
     * A basic feature test example.
     *
     * @return void
     */
    public function test_preguntas_status()
    {
        $response = $this->get(route('preguntas'));

        $response->assertStatus(200);
    }

    public function test_create_preguntas()
    {
        $this->withoutExceptionHandling();
        $response = $this->get(route('preguntas.create'));
        $response->assertStatus(200);
    }

    public function test_edit_preguntas()
    {
        $this->withoutExceptionHandling();
        $response = $this->get(route('preguntas.edit', 1));
        $response->assertStatus(200);
    }

    public function test_list_preguntas()
    {

        $this->withoutExceptionHandling();

        $response = $this->get(route('preguntas'));

        $response->assertStatus(200);

        $response->assertViewIs('livewire.admin.preguntas.preguntas');
    }


    public function test_post_preguntas()
    {
        $this->WithoutMiddleware();
        $this->withoutExceptionHandling();

        $response = $this->post(route('preguntas.store'), [
            'nombre_categoria' => 'Test nombre',
            'create_at' => now(),
            'update_at' => now(),
        ]);

        $response->assertStatus(302);

        // Acá deben haber 2 la creada en el setup y la agregada en post
        $this->assertCount(2, Pregunta::all());

        $categoria_alimento = Pregunta::all()->last();

        $this->assertEquals($categoria_alimento->nombre_categoria, 'Test nombre');
    }

    public function test_update_preguntas()
    {

        $response = $this->put(route('preguntas.update', $this->categoria_alimento), [
            // el parametro es el del name del formulario, por eso no te funcionaba con solamente nombre
            'nombre_categoria' => 'Test nombre',
        ]);

        $response->assertStatus(302);

        // Acá deben haber 2 la creada en el setup y la agregada en post
        $this->assertCount(1, Pregunta::all());

        // Acá revisamos el primer registro agregado y modificado
        $categoria_alimento = Pregunta::find(1);

        $this->assertEquals($categoria_alimento->nombre_categoria, 'Test nombre');
    }

    public function test_delete_preguntas()
    {

        $response = $this->delete(route('preguntas.delete', $this->categoria_alimento));

        $response->assertStatus(302);

        $this->assertCount(0, Pregunta::all());
    }
}
