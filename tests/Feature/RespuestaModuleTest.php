<?php

namespace Tests\Feature;

use App\Models\Pregunta;
use App\Models\Respuesta;
use App\Models\User;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Laravel\Sanctum\Sanctum;
use Tests\TestCase;

class RespuestaModuleTest extends TestCase
{
    use RefreshDatabase;

    private $usuario;
    private $respuestas;
    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->usuario = User::factory()->create();


        $this->preguntas = Pregunta::factory()->create();

        // Aca se crea una categorias, y podemos controlar los datos creados

        $this->respuestas = Respuesta::factory([
            'id'=>1,
            'respuesta' => 'Test respuesta',
            'ayuda' => 'Test ayuda',
            'pregunta_id' => $this->preguntas->id,
            'updated_at' => now(),
            'created_at' => now(),
        ])->create();

        Sanctum::actingAs(
            $this->usuario,
            ['*']
        );
    }
    /**
     * A basic feature test example.
     *
     * @return void
     */
    public function test_respuestas_status()
    {
        $response = $this->get(route('respuestas.index',$this->preguntas->id));

        $response->assertStatus(200);
    }

    public function test_edit_respuestas()
    {
        $this->withoutExceptionHandling();
        $response = $this->get(route('respuestas.edit', 1));
        $response->assertStatus(200);
    }

    public function test_list_respuestas()
    {

        $this->withoutExceptionHandling();

        $response = $this->get(route('respuestas.index',$this->preguntas->id));

        $response->assertStatus(200);

        $response->assertViewIs('livewire.admin.respuestas.respuestas');
    }


    public function test_post_respuestas()
    {
        $this->WithoutMiddleware();
        $this->withoutExceptionHandling();

        $response = $this->post(route('respuestas.store'), [
            'id'=>1,
            'respuesta' => 'Test respuesta',
            'ayuda' => 'Test ayuda',
            'pregunta_id' => $this->preguntas->id,
            'updated_at' => now(),
            'created_at' => now(),
        ]);

        $response->assertStatus(302);

        $this->assertCount(1, Respuesta::all());

        $respuesta = Respuesta::all()->last();

        $this->assertEquals($respuesta->respuesta, 'Test respuesta');
    }

    public function test_update_respuestas()
    {

        $response = $this->put(route('respuestas.update', $this->respuestas), [
            'respuesta' => 'Test respuestas 2',
            'receta_id' => $this->preguntas->id,
        ]);

        $response->assertStatus(302);

    
        $this->assertCount(1, Respuesta::all());


        $respuesta = Respuesta::find(1);

        $this->assertEquals($respuesta->respuesta, 'Test respuestas 2');
    }

    public function test_delete_respuestas()
    {

        $response = $this->delete(route('respuestas.delete',$this->respuestas->id));

        $response->assertStatus(302);

        $this->assertCount(0, Respuesta::all());
    }
}
