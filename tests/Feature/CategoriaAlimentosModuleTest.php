<?php

namespace Tests\Feature;

use App\Models\CategoriaAlimento;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use App\Models\User;
use Laravel\Sanctum\Sanctum;
use Tests\TestCase;


class CategoriaAlimentosModuleTest extends TestCase
{

    private $usuario;
    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->usuario = User::factory()->create();
        // $this->categoria_alimento = CategoriaAlimento::factory()->create();
        Sanctum::actingAs(
            $this->usuario,
            ['*']
        );
    }
    /**
     * A basic feature test example.
     *
     * @return void
     */
    public function test_categorias_alimentos()
    {
        $this->withoutExceptionHandling();
        $response = $this->get(route('categoria-alimentos'));
        $response->assertStatus(200);
    }

    public function test_create_categorias_alimentos()
    {
        $this->withoutExceptionHandling();
        $response = $this->get(route('categoria-alimentos.create'));
        $response->assertStatus(200);
    }
    public function test_edit_categorias_alimentos()
    {
        $this->withoutExceptionHandling();
        $response = $this->get(route('categoria-alimentos.edit', 1));
        $response->assertStatus(200);
    }

    public function test_list_categorias_alimentos()
    {

        $this->withoutExceptionHandling();

        $response = $this->get(route('categoria-alimentos'));

        $response->assertStatus(200);

        $response->assertViewIs('livewire.admin.categoria-alimentos.categoria-alimentos');
    }


    public function test_post_categorias_alimentos()
    {
        $this->WithoutMiddleware();
        $this->withoutExceptionHandling();

        $response = $this->post(route('categoria-alimentos.store'), [
            'nombre_categoria' => 'Tes nombre',
            'create_at' => now(),
            'update_at' => now(),
        ]);

        $response->assertStatus(302);

        $this->assertCount(1, CategoriaAlimento::all());

        $categoria_alimento = CategoriaAlimento::first();

        $this->assertEquals($categoria_alimento->nombre_categoria, 'Tes nombre');
    }

    public function test_update_categorias_alimentos()
    {
        $this->WithoutMiddleware();
        
        $this->withoutExceptionHandling();

        $categoria_alimento_update = CategoriaAlimento::factory()->create();

        $response = $this->put(route('categoria-alimentos.update', $categoria_alimento_update->id), [
            'nombre' => 'Test nombre',
        ]);

        $response->assertStatus(302);

        $this->assertCount(1, CategoriaAlimento::all());

        $categoria_alimento = $categoria_alimento_update->fresh();

        $this->assertEquals($categoria_alimento->nombre_categoria, 'Test nombre');
    }

    public function test_delete_categorias_alimentos()
    {
        $this->WithoutMiddleware();

        $this->withoutExceptionHandling();

        $categoria_alimento = CategoriaAlimento::factory()->create();

        $response = $this->delete(route('categoria-alimentos.delete', $categoria_alimento->id));

        $response->assertStatus(302);

        $this->assertCount(0, CategoriaAlimento::all());
    }
}
